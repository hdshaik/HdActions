# .github/workflows/staging.yaml

name: 'Terraform for Github Actions Staging'

# description: 'Run Terraform plan from PRs and Terraform plan/apply from main branch for stage env'
# inputs:
#   client-id:
#     description: 'The service principal Client ID to use'
#     required: true
#   client-secret:
#     description: 'The service principal Client Secret to use. Please load it from a GitHub secret.'
#     required: true
#   default-subscription-id:  
#     description: 'The default Subscription ID to use. The service principal must have access.'
#     required: true
#   tenant-id:  
#     description: 'The Azure Active Directory Tenant ID to use.'
#     required: true
#   working-directory:  
#     description: 'The directory where the Terraform configuration is located.'
#     required: true
#     default: .
#   plan-title:  
#     description: 'The title of the comment that GitHub will add after a `terraform plan`.'
#     required: true
#   terraform-version:
#     description: 'The Terraform version to use'
#     required: true
#     default: '1.1.9'
#   GITHUB_TOKEN: 
#     description: 'The secrets.GITHUB_TOKEN so that the action can create a comment on the PR'
#     required: true

on:
  push:
    branches:
    - main
    paths: 
    - staging/**
  pull_request:
    branches:
    - main
    paths: 
    - staging/**

permissions:
  contents: read
  pull-requests: write

jobs: 
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
#   environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.STAGE_SECRET }}
    steps:

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.1.9
        terraform_wrapper: false

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./aws/stage/main.tf
      shell: bash

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -no-color -out tf.plan
      working-directory: ./aws/stage/main.tf
      shell: bash

    # - name: Terraform Show
    #   id: show
    #   run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
    #   working-directory: ./staging # Use your environment folder
    #   shell: bash

    # # .github/workflows/staging.yaml
    # - name: Terraform Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terraform apply -input=false tf.plan
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }} 
    #     ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
    #     ARM_SUBSCRIPTION_ID: "[Your Subscription ID]"
    #     ARM_TENANT_ID: "[Your Tenant ID]"
    #   working-directory: ./staging # Use your environment folder
    #   shell: bash


    # # .github/workflows/staging.yaml
    # - uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   with:
    #     github-token: ${{ inputs.GITHUB_TOKEN }}
    #     script: |
    #       const fs = require("fs");
    #       const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
    #       const maxGitHubBodyCharacters = 65536;

    #       function chunkSubstr(str, size) {
    #         const numChunks = Math.ceil(str.length / size)
    #         const chunks = new Array(numChunks)
    #         for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
    #           chunks[i] = str.substr(o, size)
    #         }
    #         return chunks
    #       }

    #       // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
    #       var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
    #       for (let i = 0; i < plans.length; i++) {
    #         const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
    #         #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
    #         #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
    #         #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
    #         <details><summary>Show Plan</summary>
    #         \`\`\`\n
    #         ${plans[i]}
    #         \`\`\`
    #         </details>
    #         *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

    #         await github.rest.issues.createComment({
    #           issue_number: context.issue.number,
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           body: output
    #         })
    #       }

    # - uses: actions/checkout@v3
    # - uses: boxboat/terraform-azure-actions@v1.0.0
    #   with:
    #     client-id: '<< service principal client id >>'
    #     client-secret: ${{ secrets.CLIENT_SECRET }}
    #     default-subscription-id: '<< some subscription id >>'
    #     tenant-id: '<< some aad tenant id >>'
    #     working-directory: './staging'
    #     plan-title: 'Staging :star:'
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     terraform-version: 1.1.9